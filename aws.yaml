name: Deploy to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: sign-language-recognition
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image using your Dockerfile
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        # Also tag as latest for easier reference
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        # Push both tags to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        
    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USER: ec2-user
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: sign-language-recognition
        IMAGE_TAG: ${{ github.sha }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        
        # Create EC2 deployment script
        cat > deploy.sh << 'EOL'
        #!/bin/bash
        
        # Install Docker if not installed
        if ! command -v docker &> /dev/null; then
          sudo yum update -y
          sudo yum install docker -y
          sudo systemctl start docker
          sudo systemctl enable docker
          sudo usermod -aG docker ec2-user
        fi
        
        # Configure AWS CLI to access ECR
        export AWS_REGION=AWS_REGION_PLACEHOLDER
        
        # Log in to ECR
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ECR_REGISTRY_PLACEHOLDER
        
        # Stop and remove existing container if running
        docker stop sign-language-api || true
        docker rm sign-language-api || true
        
        # Pull latest image from ECR
        docker pull ECR_REGISTRY_PLACEHOLDER/ECR_REPOSITORY_PLACEHOLDER:latest
        
        # Run container with latest image
        docker run -d --name sign-language-api \
          -p 8000:8000 \
          -v ~/sign-language-models:/app/models \
          ECR_REGISTRY_PLACEHOLDER/ECR_REPOSITORY_PLACEHOLDER:latest
          
        # Show status
        echo "Container status:"
        docker ps | grep sign-language-api
        EOL
        
        # Replace placeholders with actual values
        sed -i "s|AWS_REGION_PLACEHOLDER|${AWS_REGION}|g" deploy.sh
        sed -i "s|ECR_REGISTRY_PLACEHOLDER|${ECR_REGISTRY}|g" deploy.sh
        sed -i "s|ECR_REPOSITORY_PLACEHOLDER|${ECR_REPOSITORY}|g" deploy.sh
        
        # Copy and execute deployment script on EC2
        scp -i private_key.pem -o StrictHostKeyChecking=no deploy.sh ${USER}@${HOST}:~/deploy.sh
        ssh -i private_key.pem -o StrictHostKeyChecking=no ${USER}@${HOST} "chmod +x ~/deploy.sh && ~/deploy.sh"
        
        # Clean up
        rm -f private_key.pem deploy.sh